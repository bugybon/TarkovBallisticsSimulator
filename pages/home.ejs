<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ballistic calculator</title>

    <script type="importmap">
        {
            "imports": {
                "three": "/three/build/three.module.js",
                "three/addons/": "/three/examples/jsm/",
                "graphql":"/graphql/index.mjs",
                "graphql-request": "/graphql-request/build/entrypoints/main.js"
            }
        }
    </script>

    <script src="/socket.io/socket.io.js"></script>

    <script type="module" src="/graphics.js" async defer></script>
    <!-- <script type="module" src="/itemQuery.js" async defer></script> -->
    <link rel="stylesheet" href="/style.css">
</head>

<body style="background-color:white;">

    <div class="armorDropdown">
        <button class="dropbtn">Armor</button>
        <div class="armorDropdown-content">
            <input type="text" class="search-input" placeholder="Search..." onkeyup="filterOptions()">
        </div>
        <h1 id="armorName">Armor name</h1>
        <img id="armorImage" src="your-image.png">
    </div>

    <div id="plate-selection"></div>

    <div id="soft-armors"></div>
    
    <script>
        const options = [
            "Hexatac HPC Plate Carrier (MultiCam Black)",
            "5.11 Tactical Hexgrid plate carrier",
            "6B2 body armor (Flora)",
            "BNTI Module-3M body armor",
            "PACA Soft Armor",
            "PACA Soft Armor (Rivals Edition)",
            "Interceptor OTV body armor (UCP)",
            "BNTI Zhuk body armor (Press)",
            "BNTI Kirasa-N body armor",
            "6B13 assault armor",
            "6B23-1 body armor (EMR)",
            "6B23-2 body armor (Mountain Flora)",
            "NPP KlASS Korund-VM body armor (Black)",
            "LBT-6094A Slick Plate Carrier",
            "HighCom Trooper TFO body armor (MultiCam)",
            "NPP KlASS Kora-Kulon body armor",
            "NFM THOR Concealable Reinforced Vest body armor",
            "MF-UNTAR body armor",
            "DRD body armor",
            "BNTI Gzhel-K body armor",
            "BNTI Zhuk body armor (EMR)",
            "FORT Defender-2 body armor",
            "6B13 M assault armor (Killa Edition)",
            "IOTV Gen4 body armor (Assault Kit, MultiCam)",
            "FORT Redut-M body armor",
            "IOTV Gen4 body armor (High Mobility Kit, MultiCam)",
            "NFM THOR Integrated Carrier body armor",
            "FORT Redut-T5 body armor (Smog)",
            "6B43 Zabralo-Sh body armor (EMR)",
            "IOTV Gen4 body armor (Full Protection Kit, MultiCam)",
            
            "Eagle Allied Industries MBSS plate carrier (Coyote Brown)",
            "Tasmanian Tiger SK plate carrier (MultiCam Black)",
            "Tasmanian Tiger Plate Carrier MKIII (Coyote Brown)",
            "S&S Precision PlateFrame plate carrier (Goons Edition)",
            "WARTECH TV-115 plate carrier (Olive Drab)",
            "WARTECH TV-110 plate carrier (Coyote)",
            "Eagle Industries MMAC plate carrier (Ranger Green)",
            "Shellback Tactical Banshee plate carrier (A-TACS AU)",
            "Ars Arma A18 Skanda plate carrier (MultiCam)",
            "ANA Tactical M1 plate carrier (Olive Drab)",
            "FirstSpear Strandhogg plate carrier (Ranger Green)",
            "ECLiPSE RBAV-AF plate carrier (Ranger Green)",
            "Stich Profi Plate Carrier V2 (Black)",
            "CQC Osprey MK4A plate carrier (Assault, MTP)",
            "Crye Precision AVS plate carrier (Tagilla Edition)",
            "5.11 Tactical TacTec plate carrier (Ranger Green)",
            "Crye Precision CPC plate carrier (Goons Edition)",
            "Ars Arma CPC MOD.1 plate carrier (A-TACS FG)",
            "Stich Profi Stich Defense mod.2 plate carrier (MultiCam)",
            "ANA Tactical M2 plate carrier (EMR)",
            "Crye Precision AVS plate carrier (Ranger Green)",
            "NPP KlASS Bagariy plate carrier (EMR)",
            "6B5-16 Zh-86 Uley armored rig (Khaki)",
            "CQC Osprey MK4A plate carrier (Protection, MTP)",
            "6B3TM-01 armored rig (Khaki)",
            "6B5-15 Zh-86 Uley armored rig (Flora)"
        ];

        const socket = io("http://localhost:3000");

        function clearBox(elementID)
        {
            document.getElementById(elementID).innerHTML = "";
        }
        
        const dropdownContent = document.querySelector('.armorDropdown-content');

        function createArmorDropDown() {
            const armorName = document.getElementById('armorName'); 
            const armorImage = document.getElementById('armorImage'); 

            options.forEach((option, index) => {
                const button = document.createElement('button');

                button.textContent = option;
                button.onclick = () => {
                    console.log("Requesting armor:", option);
                    socket.emit('requestArmorData', option);

                    armorName.textContent = option;
                    armorImage.src = `images/${option}.png`;
                }

                dropdownContent.appendChild(button);
            });
        }

        function createPlateChoiceDropDown(allowedPlates, area) {
            if (!allowedPlates || allowedPlates.length === 0) return;

            const container = document.createElement('div');
            container.classList.add('plate-container');
            container.id = `plate-container-${area}`;
            
            const select = document.createElement('select');
            select.classList.add('plate-dropdown');

            const title = document.createElement('p');
            title.textContent = `Select ${area} Plate`;
            title.classList.add('plate-title');

            const defaultOption = document.createElement('option');
            defaultOption.textContent = `No plate`;
            defaultOption.value = "";
            select.appendChild(defaultOption);

            allowedPlates.forEach(plate => {
                const option = document.createElement('option');
                option.textContent = plate;
                option.value = plate;
                select.appendChild(option);
            });

            const imgContainer = document.createElement('div');
            imgContainer.classList.add('plate-image-container');
            const img = document.createElement('img');
            img.classList.add('plate-image');
            img.src = `images/placeholder.png`; 
            imgContainer.appendChild(img);
            
            const label = document.createElement('p');
            label.textContent = "";
            label.classList.add('plate-label');

            select.addEventListener('change', function () {
                const selectedPlate = this.value;
                if (selectedPlate) {
                    img.src = `images/${selectedPlate}.png`; 
                    label.textContent = selectedPlate;
                    socket.emit('plateSelected', { selectedPlate });
                } else {
                    img.src = `images/placeholder.png`;
                    label.textContent = "";
                }
            });

            container.appendChild(title);
            container.appendChild(select);
            container.appendChild(imgContainer);
            container.appendChild(label);
            
            const armorSelectionContainer = document.getElementById('plate-selection');
            armorSelectionContainer.appendChild(container);
        }

        function removeAllPlateContainers() {
            const plateContainers = document.querySelectorAll('.plate-container');
            const softArmorContainers = document.querySelectorAll('.soft-armor-container')

            plateContainers.forEach(container => container.remove());
            softArmorContainers.forEach(container => container.remove());
        }

        function extractPlates(armorData, plateNameId) {
            const slot = armorData.properties.armorSlots.find(slot => slot.nameId === plateNameId);

            const plateNames = [];
            if (slot && slot.allowedPlates) {
                for (let plate of slot.allowedPlates) {
                    plateNames.push(plate.name);
                }
            } 

            return plateNames;
        }

        function extractSoftArmor(data){
            const excludedSlots = ["Front_plate", "Back_plate", "Left_side_plate", "Right_side_plate"];
            const softArmors = [];

            data.properties.armorSlots.forEach(slot => {
                if(!excludedSlots.includes(slot.nameId)){
                    if(!slot.material.name)
                    {
                        softArmors.push({
                            nameID: slot.nameId,
                            class: slot.class,
                            durability: slot.durability,
                            material: "aramid"
                        });
                    } else {
                        softArmors.push({
                        nameID: slot.nameId,
                        class: slot.class,
                        durability: slot.durability,
                        material: slot.material.name
                    });
                    }
                }
            });

            return softArmors;
        }

        function createSoftArmor(armors) {
            const softArmorContainer = document.getElementById('soft-armors');
            softArmorContainer.innerHTML = "";

            armors.forEach(armor => {
                const container = document.createElement('div');
                container.classList.add('soft-armor-container');
                container.id = `soft-armor-${armor.nameID}`;

                const imgContainer = document.createElement('div');
                imgContainer.classList.add('soft-armor-image-container');
                
                const area = JSON.stringify(armor.nameId);
                const img = document.createElement('img');
                img.classList.add('soft-armor-image');
                img.src = `images/${armor.nameID.replace(/\s+/g, '_')}.png`
                img.alt = armor.nameID;
                imgContainer.appendChild(img);

                const infoContainer = document.createElement('div');
                infoContainer.classList.add('soft-armor-info');

                const nameLabel = document.createElement('p');
                nameLabel.textContent = `Area: ${armor.nameID}`;
                nameLabel.classList.add('soft-armor-label');
                
                const classLabel = document.createElement('p');
                classLabel.textContent = `Class: ${armor.class}`;
                
                const durabilityLabel = document.createElement('p');
                durabilityLabel.textContent = `Durability:${armor.durability} / ${armor.durability}`;
                
                const materialLabel = document.createElement('p');
                materialLabel.textContent = `Material: ${armor.material}`;
                
                infoContainer.appendChild(nameLabel);
                infoContainer.appendChild(classLabel);
                infoContainer.appendChild(durabilityLabel);
                infoContainer.appendChild(materialLabel);
                
                container.appendChild(infoContainer);
                container.appendChild(imgContainer);
                
                softArmorContainer.appendChild(container);
            });
        }
        
        socket.on('recieveArmorData', (data) => {
            console.log("Received armor data:", data);

            removeAllPlateContainers();

            const frontPlates = extractPlates(data, "Front_plate");
            const backPlates = extractPlates(data, "Back_plate");
            const leftPlates = extractPlates(data, "Left_side_plate");
            const rightPlates = extractPlates(data, "Right_side_plate");

            createPlateChoiceDropDown(frontPlates, "Front_plate");
            createPlateChoiceDropDown(backPlates, "Back_plate");
            createPlateChoiceDropDown(leftPlates, "Left_side_plate");
            createPlateChoiceDropDown(rightPlates, "Right_side_plate");

            const softArmors = extractSoftArmor(data);
            if (softArmors.length !== 0)
            createSoftArmor(softArmors);
        });

        socket.on('recieveArmorDataError', (error) => {
            console.error("Armor not found:", error);
            alert("Armor not found.");
            
            removeAllPlateContainers();
        });

        createArmorDropDown();

        function filterOptions() {
            const input = document.querySelector('.search-input');
            const filter = input.value.toLowerCase();
            const buttons = dropdownContent.querySelectorAll('button');

            buttons.forEach(button => {
                const text = button.textContent || button.innerText;
                button.style.display = text.toLowerCase().indexOf(filter) > -1 ? '' : 'none';
            });
        }
    </script>
</body>
</html>