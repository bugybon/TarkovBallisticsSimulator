<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ballistic calculator</title>

    <script type="importmap">
        {
            "imports": {
                "three": "/three/build/three.module.js",
                "three/addons/": "/three/examples/jsm/",
                "graphql":"/graphql/index.mjs",
                "graphql-request": "/graphql-request/build/entrypoints/main.js"
            }
        }
    </script>

    <script src="/socket.io/socket.io.js"></script>

    <script type="module" src="/graphics.js" async defer></script>
    <!-- <script type="module" src="/itemQuery.js" async defer></script> -->
    <link rel="stylesheet" href="/style.css">
</head>

<body style="background-color:white;">

    <div class="armorDropdown">
        <button class="dropbtn">Armor</button>
        <div class="armorDropdown-content">
            <input type="text" class="search-input" placeholder="Search..." onkeyup="filterOptions(this, '.armorDropdown-content', 'button-armor')">
        </div>
        <h1 id="armorName"></h1>
        <img id="armorImage" src="armor.png"> 
    </div>

    <!-- <div class="helmetDropdown">
        <button class="dropbtn">Helmet</button>
        <div class="helmetDropdown-content">
            <input type="text" class="search-input" placeholder="Search..." onkeyup="filterOptions(this, '.helmetDropdown-content', 'button-helmet')">
        </div>
        <h1 id="helmetName"></h1>
        <img id="helmetImage" src="helmet.png"> 
    </div> -->

    <div id="plate-selection"></div>

    <div id="soft-armors"></div>

    <div class="bulletsDropdown">
        <button class="dropbtn">Bullets</button>
        <div class="bullDropdown-content">
            <input type="text" class="search-input" placeholder="Search..." onkeyup="filterOptions(this, '.bullDropdown-content', 'button-bullet')">
        </div>
        <h1 id="bulletName"></h1>
        <img id="bulletImage" src="bullet.png"> 
    </div>

    <div id="bullet"></div>

    <div id="health">
        <img id="health" src="images/health.png"> 
        <div id="head" class="HP_container" >35/35</div>
        <div id="left_arm" class="HP_container">60/60</div>
        <div id="right_arm" class="HP_container">60/60</div>
        <div id="thorax" class="HP_container">85/85</div>
        <div id="stomach" class="HP_container">70/70</div>
        <div id="left_leg" class="HP_container">65/65</div>
        <div id="right_leg" class="HP_container">65/65</div>
    </div>

    <script>

        const socket = io("http://localhost:3000");

        socket.emit('requestArmorNames');
        socket.emit('requestBulletNames');

        function clearBox(elementID)
        {
            document.getElementById(elementID).innerHTML = "";
        }

        socket.on('recieveArmorNames', (names) => {

            const dropdownContent = document.querySelector('.armorDropdown-content');

            console.log("Received armor names:", names);

            const armorName = document.getElementById('armorName'); 
            const armorImage = document.getElementById('armorImage'); 

            const options = names;//.map((item) => item['name']);
            // console.log(options);

            options.forEach((option, index) => {
                const button = document.createElement('button-armor');

                button.textContent = option;
                button.onclick = () => {
                    console.log("Requesting armor:", option);
                    socket.emit('requestArmorData', option);

                    armorName.textContent = option;
                    armorImage.src = `images/${option}.png`;
                }

                dropdownContent.appendChild(button);
            });
        });

        socket.on('recieveArmorNames', (names) => {

            const dropdownContent = document.querySelector('.helmetDropdown-content');

            console.log("Received helmet names:", names);

            const helmetName = document.getElementById('helmetName'); 
            const helmetImage = document.getElementById('helmetImage'); 

            const options = names;//.map((item) => item['name']);
            // console.log(options);

            options.forEach((option, index) => {
                const button = document.createElement('button-helmet');

                button.textContent = option;
                button.onclick = () => {
                    console.log("Requesting helmet:", option);
                    socket.emit('requestHelmetData', option);

                    helmetName.textContent = option;
                    helmetImage.src = `images/${option}.png`;
                }

                dropdownContent.appendChild(button);
            });
        });

        socket.on('recieveBulletNames', (names) => {

            const dropdownContent = document.querySelector('.bullDropdown-content');

            console.log("Received bullet names:", names);

            const bulletName = document.getElementById('bulletName'); 
            const bulletImage = document.getElementById('bulletImage'); 

            const options = names;//.map((item) => item['name']);
            // console.log(options);

            options.forEach((option, index) => {
                const button = document.createElement('button-bullet');

                button.textContent = option;
                button.onclick = () => {
                    console.log("Requesting bullets:", option);
                    socket.emit('requestBullets', option[1]);

                    bulletName.textContent = option;
                    bulletImage.src = `images/${option[1].trim().toLowerCase().replace(/[^a-z0-9]/g, "")}.png`;
                }
                dropdownContent.appendChild(button);
            });
        });

        function createBulletContainer(data){

            const bulletContainer = document.getElementById('bullet');
            bulletContainer.innerHTML = "";

            const container = document.createElement('div');
            container.classList.add('bullet-container');
            container.id = `bullet-container`;

            const damage = document.createElement('p');
            damage.textContent = `Damage: ${data.damage}`;

            const armorDamage = document.createElement('p');
            armorDamage.textContent = `Armor Damage: ${data.armorDamage}`;
            
            const penetration = document.createElement('p');
            penetration.textContent = `Penetration Power: ${data.penetrationPower}`;
            
            const projectilesCount = document.createElement('p');
            projectilesCount.textContent = `Projectile Count: ${data.projectileCount}`;
            
            container.appendChild(damage);
            container.appendChild(armorDamage);
            container.appendChild(penetration);
            container.appendChild(projectilesCount);

            bulletContainer.appendChild(container);
        }

        function removeBulletContainer() {
            const bulletContainer = document.querySelector('.bullet-container');
            if (bulletContainer) {
                bulletContainer.remove();
            }
        }

        socket.on('recieveBulletsData', (data) => {
            console.log("Received bullet data:", data);
            removeBulletContainer();
            
            createBulletContainer(data);
        });

        socket.on('recieveBulletsError', (error) => {
            console.error("Bullet not found:", error);
            alert("Bullet not found.");
            
            removeBulletContainer();
        });

        function createPlateChoiceDropDown(allowedPlates, area) {
            if (!allowedPlates || allowedPlates.length === 0) return;

            const container = document.createElement('div');
            container.classList.add('plate-container');
            container.id = `plate-container-${area}`;
            
            const select = document.createElement('select');
            select.classList.add('plate-dropdown');

            const title = document.createElement('p');
            title.textContent = `Select ${area} Plate`;
            title.classList.add('plate-title');

            const defaultOption = document.createElement('option');
            defaultOption.textContent = `No plate`;
            defaultOption.value = "";
            select.appendChild(defaultOption);

            allowedPlates.forEach(plate => {
                const option = document.createElement('option');
                option.textContent = plate;
                option.value = plate;
                select.appendChild(option);
            });

            const imgContainer = document.createElement('div');
            imgContainer.classList.add('plate-image-container');
            const img = document.createElement('img');
            img.classList.add('plate-image');
            img.src = `images/placeholder.png`; 
            imgContainer.appendChild(img);
            
            const label = document.createElement('p');
            label.textContent = "";
            label.classList.add('plate-label');

            select.addEventListener('change', function () {
                const selectedPlate = this.value;

                if (selectedPlate) {
                    img.src = `images/${selectedPlate}.png`; 
                    label.textContent = selectedPlate;
                    socket.emit('plateSelected', selectedPlate);

                    const existingInfo = container.querySelector('.plate-info');
                    if (existingInfo) existingInfo.remove();

                    socket.once('recievePlateData', (plate)=>{
                        console.log(plate);
                        const infoContainer = document.createElement('div');

                        infoContainer.classList.add('plate-info');
                        
                        const classLabel = document.createElement('p');
                        classLabel.textContent = `Class: ${plate.properties.class}`;
                        
                        const durabilityLabel = document.createElement('p');
                        durabilityLabel.textContent = `Durability: ${plate.properties.durability} / ${plate.properties.durability}`;
                        
                        const materialLabel = document.createElement('p');
                        materialLabel.textContent = `Material: ${plate.properties.material.id}`;

                        const throughputLabel = document.createElement('p');
                        throughputLabel.textContent = `Blunt number: ${plate.properties.bluntThroughput}`;
                        
                        infoContainer.appendChild(classLabel);
                        infoContainer.appendChild(durabilityLabel);
                        infoContainer.appendChild(materialLabel);
                        infoContainer.appendChild(throughputLabel);
                        
                        container.appendChild(infoContainer);
                    });
                }else{
                    img.src = `images/placeholder.png`;
                    label.textContent = "";

                    const existingInfo = container.querySelector('.plate-info');
                    if (existingInfo) existingInfo.remove();

                    console.log(selectedPlate);
                    const infoContainer = document.createElement('div');
                    infoContainer.classList.add('plate-info');
                    container.appendChild(infoContainer);
                }
            });

            container.appendChild(title);
            container.appendChild(select);
            container.appendChild(imgContainer);
            container.appendChild(label);
            
            const armorSelectionContainer = document.getElementById('plate-selection');
            armorSelectionContainer.appendChild(container);
        }

        function removeAllPlateContainers() {
            const plateContainers = document.querySelectorAll('.plate-container');
            const softArmorContainers = document.querySelectorAll('.soft-armor-container')

            plateContainers.forEach(container => container.remove());
            softArmorContainers.forEach(container => container.remove());
        }

        function extractPlates(armorData, plateNameId) {
            const slot = armorData.properties.armorSlots.find(slot => slot.nameId.toLowerCase() === plateNameId);

            const plateNames = [];
            if (slot && slot.allowedPlates) {
                for (let plate of slot.allowedPlates) {
                    plateNames.push(plate.name);
                }
            } 

            return plateNames;
        }

        function extractSoftArmor(data){
            const excludedSlots = ["front_plate", "back_plate", "left_side_plate", "right_side_plate"];
            const softArmors = [];
            
            data.properties.armorSlots.forEach(slot => {
                if(!excludedSlots.includes(slot.nameId.toLowerCase())){
                    if(!slot.material.name)
                    {
                        softArmors.push({
                            nameID: slot.nameId,
                            class: slot.class,
                            durability: slot.durability,
                            material: "aramid",
                            bluntThroughput: slot.bluntThroughput
                        });
                    } else {
                        softArmors.push({
                        nameID: slot.nameId,
                        class: slot.class,
                        durability: slot.durability,
                        material: slot.material.name,
                        bluntThroughput: slot.bluntThroughput
                    });
                    }
                }
            });

            return softArmors;
        }

        function createSoftArmor(armors) {
            const softArmorContainer = document.getElementById('soft-armors');
            softArmorContainer.innerHTML = "";

            armors.forEach(armor => {
                const container = document.createElement('div');
                container.classList.add('soft-armor-container');
                container.id = `soft-armor-${armor.nameID}`;

                const imgContainer = document.createElement('div');
                imgContainer.classList.add('soft-armor-image-container');
                
                const area = JSON.stringify(armor.nameId);
                const img = document.createElement('img');
                img.classList.add('soft-armor-image');
                img.src = `images/${armor.nameID.replace(/\s+/g, '_')}.png`
                img.alt = armor.nameID;
                imgContainer.appendChild(img);

                const infoContainer = document.createElement('div');
                infoContainer.classList.add('soft-armor-info');

                const nameLabel = document.createElement('p');
                nameLabel.textContent = `Area: ${armor.nameID}`;
                nameLabel.classList.add('soft-armor-label');
                
                const classLabel = document.createElement('p');
                classLabel.textContent = `Class: ${armor.class}`;
                
                const durabilityLabel = document.createElement('p');
                durabilityLabel.textContent = `Durability: ${armor.durability} / ${armor.durability}`;
                
                const materialLabel = document.createElement('p');
                materialLabel.textContent = `Material: ${armor.material}`;

                const throughputLabel = document.createElement('p');
                throughputLabel.textContent = `Blunt number: ${armor.bluntThroughput}`;
                
                infoContainer.appendChild(nameLabel);
                infoContainer.appendChild(classLabel);
                infoContainer.appendChild(durabilityLabel);
                infoContainer.appendChild(materialLabel);
                infoContainer.appendChild(nameLabel);
                infoContainer.appendChild(throughputLabel);
                
                container.appendChild(infoContainer);
                container.appendChild(imgContainer);
                
                
                softArmorContainer.appendChild(container);
            });
        }
        
        socket.on('recieveArmorData', (data) => {
            console.log("Received armor data:", data);

            removeAllPlateContainers();

            const frontPlates = extractPlates(data, "front_plate");
            const backPlates = extractPlates(data, "back_plate");
            const leftPlates = extractPlates(data, "left_side_plate");
            const rightPlates = extractPlates(data, "right_side_plate");

            createPlateChoiceDropDown(frontPlates, "front_plate");
            createPlateChoiceDropDown(backPlates, "back_plate");
            createPlateChoiceDropDown(leftPlates, "left_side_plate");
            createPlateChoiceDropDown(rightPlates, "right_side_plate");

            const softArmors = extractSoftArmor(data);
            if (softArmors.length != 0)
            createSoftArmor(softArmors);
        });

        socket.on('recieveArmorDataError', (error) => {
            console.error("Armor not found:", error);
            alert("Armor not found.");
            
            removeAllPlateContainers();
        });

        function filterOptions(inputElement, dropdownSelector, button) {
            const dropdownContent = document.querySelector(dropdownSelector);

            const filter = inputElement.value.toLowerCase();
            const buttons = dropdownContent.querySelectorAll(button);

            buttons.forEach(button => {
                const text = button.textContent || button.innerText;
                button.style.display = text.toLowerCase().indexOf(filter) > -1 ? '' : 'none';
            });
        }

        socket.on("requestBulletData", () => {  
            const bulletContainer = document.getElementById('bullet');
            const damageElement = bulletContainer.querySelector('p:nth-child(1)');
            const armorDamageElement = bulletContainer.querySelector('p:nth-child(2)');
            const penetrationElement = bulletContainer.querySelector('p:nth-child(3)');

            if (damageElement && armorDamageElement && penetrationElement) {
                const bulletData = {
                    damage: parseInt(damageElement.textContent.split(": ")[1], 10),
                    armorDamage: parseInt(armorDamageElement.textContent.split(": ")[1], 10),
                    penetration: parseInt(penetrationElement.textContent.split(": ")[1], 10)
                };

                //console.log("Extracted bullet data:", bulletData);
                socket.emit("sendBulletData", bulletData);
            } else {
                console.error("Bullet data elements not found in the bullet div.");
            }
        });

        function getBodyPartsHP() {
            const hpData = {};
            document.querySelectorAll('.HP_container').forEach(element => {
                const bodyPart = element.id; 
                const hpText = element.textContent.trim(); 
                const [currentHP, maxHP] = hpText.split('/').map(Number); 

                hpData[bodyPart] = { currentHP, maxHP };
            });
            return hpData;
        }

        socket.on("requestBodyHP", () => {
            const bodyHP = getBodyPartsHP();     
            socket.emit("sendBodyHP", bodyHP);
        });

        socket.on("updateHP", (updatedBodyHP) => {
            console.log("in updateHP socket");
            for (const part in updatedBodyHP) {
                const { currentHP, maxHP } = updatedBodyHP[part];
                const element = document.getElementById(part);

                if (element) {
                    element.textContent = `${Math.floor(currentHP)}/${maxHP}`;
                }
            }
        });

        socket.on("getArmorPart", (name) => {
            let armorDiv;
            let armorContainer = document.getElementById(name);
            console.log("armorContainer=",armorContainer);
            // if(name.includes("soft") && !armorContainer){
            //     console.warn(`Armor container not found using ID (${name}), trying class selector...`);
            //     armorContainer = document.querySelector(`.${name}`);
            //     let armorDiv = armorContainer.querySelector(".soft-armor-info
                
            // }else if (!armorContainer) {
            //     console.error(`Armor part ${name} not found in the DOM!`);
            //     socket.emit("sendArmorPart", { error: `Armor part ${name} not found` });
            //     return;
            // }

            if(!armorContainer){
                socket.emit("sendArmorPart", { error: `Armor part ${name} not found` });
            }
            if(name.includes("soft")){
                armorDiv = armorContainer.querySelector(".soft-armor-info");
            }else{
                armorDiv = armorContainer.querySelector(".plate-info");
            }
            console.log(armorDiv);

            if (!armorDiv) {
                console.error(`Armor info div not found inside: ${name}`);
                socket.emit("sendArmorPart", { error: `Armor info missing in ${name}` });
                return;
            }

            const armorInfo = {};
            armorDiv.querySelectorAll("p").forEach((p) => {
                const [key, value] = p.textContent.split(": ").map(str => str.trim());
                if (key && value) {
                    if (key.toLowerCase() === "durability") {
                        let [current, max] = value.split("/").map(str => str.trim());
                        armorInfo["durability"] = {
                            current: parseInt(current),
                            max: parseInt(max)
                        };
                    } else {
                        armorInfo[key.toLowerCase().replace(/ /g, "_")] = value;
                    }
                }
            });

            //console.log(armorInfo);
            socket.emit("sendArmorPart", armorInfo);
        });

    </script>
</body>
</html>